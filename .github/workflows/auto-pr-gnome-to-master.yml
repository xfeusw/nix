name: Auto Create and Merge PR from gnome to master

on:
  push:
    branches: [gnome]  # Trigger on pushes to the gnome branch

jobs:
  create-and-merge-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate diffs

      # Check for changes between gnome and master
      - name: Check for changes
        id: diff
        run: |
          git fetch origin master
          if git diff --quiet origin/master gnome; then
            echo "No changes to merge"
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, creating PR"
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      # Create the Pull Request
      - name: Create Pull Request
        if: steps.diff.outputs.no_changes != 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT }}  # Use PAT for protected branches
          commit-message: "Auto-merge changes from gnome"
          title: "Auto PR: Merge gnome branch into master"
          body: |
            This PR automatically merges changes from the `gnome` branch into `master`.
            - Triggered by push to `gnome` at ${{ github.sha }}.
            - Auto-generated by GitHub Actions.
          base: master
          branch: auto-gnome-to-master-${{ github.run_id }}  # Unique branch name
          labels: automated, gnome-sync
          assignees: your-username  # Replace with your GitHub username
          draft: false
          delete-branch: true

      # Auto-approve and merge the PR
      - name: Auto-merge Pull Request
        if: steps.create-pr.outputs.pull-request-number  # Only run if PR was created
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}  # Use PAT for approval/merge
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pull-request-number }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Approve the PR
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number: prNumber,
              event: 'APPROVE'
            });

            // Merge the PR
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: prNumber,
              merge_method: 'merge'  # Options: merge, squash, rebase
            });

            console.log(`Merged PR #${prNumber}`);
